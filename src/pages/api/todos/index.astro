---
export const partial = true;
import { db, Tasks, like, eq } from 'astro:db';
import Task from '@/components/Task.astro';
import { nanoid } from 'nanoid';
import xss from 'xss';

const method = Astro.request.method;
// console.log(method);

const id = Astro.url.searchParams.get('id');
// console.log(id);

async function getTodo(id: string) {
  return await db
    .select()
    .from(Tasks)
    .where(like(Tasks.id, `%${id}%`))
    .get();
}
async function getData() {
  const formData = await Astro.request.formData();
  const text = String(formData.get('text'));

  done = String(formData.get('done')) === 'true' ? true : false;
  return { text, done };
}
let todo, text, done;

switch (method) {
  // add new task
  case 'POST':
    text = xss((await getData()).text);
    if (!text) break;

    const newTodo = { id: nanoid(), text } as unknown as Task;

    await db.insert(Tasks).values(newTodo);
    todo = newTodo;
    break;
  // update task
  case 'PUT':
    text = xss((await getData()).text);
    todo = id && (await getTodo(id));
    if (!text) break;
    await db
      .update(Tasks)
      .set({ text: `${text}` })
      .where(eq(Tasks.id, `${id}`));
    todo = id && (await getTodo(id));
    break;
  case 'PATCH':
    if (id === null) break;
    todo = await getTodo(id);
    done = (await getData()).done;

    const updatedTodo = { ...todo, done };
    await db
      .update(Tasks)
      .set(updatedTodo)
      .where(eq(Tasks.id, `${id}`));
    todo = updatedTodo;
    break;
  case 'DELETE':
    await db.delete(Tasks).where(eq(Tasks.id, `${id}`));
    break;
  // get text of task
  default:
    if (id === null) return;

    todo = await getTodo(id);

    break;
}

// console.log(todo);
---

{method === 'GET' && todo && <Task todo={todo} mode="edit" />}
{method === 'POST' && text && <Task todo={todo} />}
{(method === 'PUT' || method === 'PATCH') && <Task todo={todo} />}

{method === 'DELETE' && id && null}
